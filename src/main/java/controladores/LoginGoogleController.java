package controladores;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.sql.Date;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.auth.oauth2.TokenResponse;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.oauth2.Oauth2;
import com.google.api.services.oauth2.Oauth2Scopes;
import com.google.api.services.oauth2.model.Userinfoplus;

import dtos.SesionDto;
import dtos.UsuarioDto;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import servicios.ApiService;

@WebServlet("/login/google") // Anotación para registrar el servlet
public class LoginGoogleController extends HttpServlet {

	private static final long serialVersionUID = 1L;
	private static final String CLIENT_ID = "797777584256-rv70sv8lpr6pvl9bbki0b029p0fse5se.apps.googleusercontent.com"; // Reemplaza
	private ApiService apiService = new ApiService(); // con
														// tu
														// CLIENT_ID
	private static final String CLIENT_SECRET = "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"; // Reemplaza con tu CLIENT_SECRET
	private static final String REDIRECT_URI = "http://localhost:8080/webboostly/login/google"; // Debe coincidir con el
																								// URI de redirección en
																								// Google

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();

		// Forzar inicio de sesión cada vez
		session.removeAttribute("datos");

		String code = request.getParameter("code");

		if (code != null) {
			doPost(request, response);
		} else {
			try {
				GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
						GoogleNetHttpTransport.newTrustedTransport(), JacksonFactory.getDefaultInstance(), CLIENT_ID,
						CLIENT_SECRET, Arrays.asList(Oauth2Scopes.USERINFO_EMAIL, Oauth2Scopes.USERINFO_PROFILE))
						.setAccessType("offline").build();

				// Forzar selección de cuenta en cada login
				String authorizationUrl = flow.newAuthorizationUrl().setRedirectUri(REDIRECT_URI)
						.set("prompt", "select_account").build();

				response.sendRedirect(authorizationUrl);
			} catch (GeneralSecurityException | IOException e) {
				e.printStackTrace();
				response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error en la autenticación.");
			}
		}
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String code = request.getParameter("code");

		if (code == null) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Código de autorización no encontrado");
			return;
		}

		try {
			System.out.println("Iniciando flujo de OAuth2...");

			// Flujo de autenticación de Google
			GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
					GoogleNetHttpTransport.newTrustedTransport(), JacksonFactory.getDefaultInstance(), CLIENT_ID,
					CLIENT_SECRET, Arrays.asList(Oauth2Scopes.USERINFO_EMAIL, Oauth2Scopes.USERINFO_PROFILE))
					.setAccessType("offline").build();

			// Obtener token
			TokenResponse tokenResponse = flow.newTokenRequest(code).setRedirectUri(REDIRECT_URI).execute();
			Credential credential = flow.createAndStoreCredential(tokenResponse, "user");

			// Obtener información del usuario desde Google
			Oauth2 oauth2 = new Oauth2.Builder(GoogleNetHttpTransport.newTrustedTransport(),
					JacksonFactory.getDefaultInstance(), credential).setApplicationName("Google OAuth2 Login").build();

			Userinfoplus userinfo = oauth2.userinfo().get().execute();
			System.out.println("Información del usuario obtenida: " + userinfo);

			// Crear objeto UsuarioDto
			UsuarioDto usuario = new UsuarioDto();
			usuario.setMailUsuario(userinfo.getEmail()); // Usamos email como identificador único
			usuario.setApellidosUsuario(userinfo.getFamilyName());
			usuario.setNombreUsuario(userinfo.getGivenName());
			usuario.setFechaAltaUsuario(Date.valueOf(LocalDate.now()));
			usuario.setGoogleUsuario(true);
			usuario.setContrasenyaUsuario("google_autogenerated");

			System.out.println("Usuario antes de enviar a la API: " + usuario);

			// 🚀 Buscar usuario por email en la base de datos
			UsuarioDto usuarioExistente = apiService.obtenerUsuarioPorEmail(userinfo.getEmail());

			if (usuarioExistente == null) {
				System.out.println("Usuario no encontrado en la base de datos, registrando...");
				apiService.registroUsuario(usuario);
			} else {
				System.out.println("Usuario ya registrado, procediendo con login...");
				usuario = usuarioExistente; // Usamos la info del usuario ya registrado
			}

			System.out.println(usuario.toString());

			SesionDto sesionDto = new SesionDto(usuarioExistente.getId(), usuarioExistente.getMailUsuario(),
					usuarioExistente.getRol() // Asegúrate de que UsuarioDto tiene este campo
			);

			// Guardamos en sesión el usuario autenticado
			HttpSession session = request.getSession();
			session.setAttribute("datos", sesionDto);

			System.out.println("Usuario guardado en la sesión correctamente.");
			response.sendRedirect("/webboostly/");

		} catch (GeneralSecurityException | IOException e) {
			e.printStackTrace();
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error al procesar la autenticación.");
		}
	}

}